
angular.module('rpsPlayer', [], function() {
	
}).factory('playerService', function($q, $http, $location) {
	return {
		getPlayer: function(playerid) {
    		var deferred = $q.defer();
    		var params = {};
    		if (playerid && playerid != "") {
    			params["id"] = playerid;
    		}
			$http.get("/user/search", {
					params: params
				})
				.success(function(data) {
					deferred.resolve(data);
				})
				.error(function(data, status) {
					console.error(status, data);
					deferred.reject(data.error || data);
				});

    		return deferred.promise;
		},
		
		getPlayerPhoto: function(playerid) {
    		var deferred = $q.defer();
    		var params = {};
    		if (playerid && playerid != "") {
    			params["id"] = playerid;
    		}
			$http.get("/user/picture", {
					params: params
				})
				.success(function(data) {
					deferred.resolve(data);
				})
				.error(function(data, status) {
					console.error(status, data);
					deferred.reject(data.error || data);
				});

    		return deferred.promise;
		},

        savePlayer: function(player) {
        	var deferred = $q.defer();
        	
        	$http.post("/user", player, {json: true})
        		.success(function(data) {
        			deferred.resolve(data);
        		})
        		.error(function (data, status) {
					console.error(status, data);
        			deferred.reject(data.error || data);
        		});
        	
        	return deferred.promise;
        },
        
        setCurrentPlayer: function(player) {
        	var deferred = $q.defer();
        	
			$http.post('/robot/challenger', player, {json: true})
        		.success(function(data) {
        			deferred.resolve(data);
        		})
        		.error(function (data, status) {
        			console.error(status, data);
					deferred.reject(data.error || data);
        		});
        	
        	return deferred.promise;
        }
	}
});
